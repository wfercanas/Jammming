{"version":3,"sources":["Util/Spotify.js","config.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","index.js"],"names":["USER_ACCESS_TOKEN","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expireInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","search","term","accessToken","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackURIs","length","userID","method","body","JSON","stringify","playlistID","uris","SearchBar","props","state","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","onRemove","renderAction","TrackList","song","SearchResults","results","Playlist","handleNameChange","event","onNameChange","defaultValue","playlistName","playlistTracks","onSave","App","searchResults","updatePlaylistName","find","savedTrack","currentPlaylist","push","modifiedPlaylist","filter","newName","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bafa26d7.chunk.js","sourcesContent":["import CLIENT_ID from '../config';\n\nconst REDIRECT_URI = 'http://localhost:3000/';\nlet USER_ACCESS_TOKEN;\n\nconst Spotify = {\n  getAccessToken() {\n    if (USER_ACCESS_TOKEN) {\n      return USER_ACCESS_TOKEN;\n    }\n    // Check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expireInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expireInMatch) {\n      USER_ACCESS_TOKEN = accessTokenMatch[1];\n      const expiresIn = Number(expireInMatch[1]);\n      // This clears the parameters, allowing us to grab a new access token when it expires\n      window.setTimeout(() => (USER_ACCESS_TOKEN = ''), expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return USER_ACCESS_TOKEN;\n    } else {\n      const accessURL = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\n      window.location = accessURL;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        } else {\n          return jsonResponse.tracks.items.map((track) => {\n            return {\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              uri: track.uri,\n            };\n          });\n        }\n      });\n  },\n\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    let userID;\n\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: headers,\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            const playlistID = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\n              {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ uris: trackURIs }),\n              }\n            );\n          });\n      });\n  },\n};\n\nexport default Spotify;\n","const CLIENT_ID = '0cef9e37848941a088a568e8edee8596';\n\nexport default CLIENT_ID;\n","import React from 'react';\n\nimport './SearchBar.css';\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: '',\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(e) {\n    this.setState({ term: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          placeholder=\"Enter A Song, Album, or Artist\"\n          onChange={this.handleTermChange}\n        />\n        <button className=\"SearchButton\" onClick={this.props.onSearch}>\n          SEARCH\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './Track.css';\n\nexport class Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return (\n        <button className=\"Track-action\" onClick={this.removeTrack}>\n          -\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"Track-action\" onClick={this.addTrack}>\n          +\n        </button>\n      );\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>\n            {this.props.track.artist} {this.props.track.album}\n          </p>\n        </div>\n        <div className=\"Track-action\">{this.renderAction()}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './TrackList.css';\n\nimport { Track } from '../Track/Track';\n\nexport class TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks &&\n          this.props.tracks.map((song) => {\n            return (\n              <Track\n                key={song.id}\n                track={song}\n                onAdd={this.props.onAdd}\n                onRemove={this.props.onRemove}\n                isRemoval={this.props.isRemoval}\n              />\n            );\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './SearchResults.css';\n\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          tracks={this.props.results}\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './Playlist.css';\n\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input\n          defaultValue=\"Create Playlist\"\n          value={this.props.playlistName}\n          onChange={this.handleNameChange}\n        />\n        <TrackList\n          tracks={this.props.playlistTracks}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Spotify from '../../Util/Spotify';\n\nimport './App.css';\n\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { Playlist } from '../Playlist/Playlist';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'Create Playlist',\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (\n      this.state.playlistTracks.find((savedTrack) => savedTrack.id === track.id)\n    ) {\n      return;\n    } else {\n      const currentPlaylist = this.state.playlistTracks;\n      currentPlaylist.push(track);\n      this.setState({\n        playlistTracks: currentPlaylist,\n      });\n    }\n  }\n\n  removeTrack(track) {\n    const currentPlaylist = this.state.playlistTracks;\n    const modifiedPlaylist = currentPlaylist.filter(\n      (savedTrack) => savedTrack.id !== track.id\n    );\n    this.setState({ playlistTracks: modifiedPlaylist });\n  }\n\n  updatePlaylistName(newName) {\n    this.setState({ playlistName: newName });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map((track) => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistTracks: [],\n        playlistName: 'Create Playlist',\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then((result) => {\n      this.setState({ searchResults: result });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              results={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './Components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}